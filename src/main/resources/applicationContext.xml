<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- <mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 
		两个bean，是spring MVC为@Controller分发请求所必须的。并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持(JAXB)，读写JSON的支持(Jackson)。处理响应ajax请求时，就会使用到对json的支持。对action写JUnit单元测试时，要从spring 
		IOC容器中取DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean来完成测试，取的时候要知道是<mvc:annotation-driven 
		/>这一句注册的这两个bean。 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	<context:component-scan base-package="cn.neu"></context:component-scan>

	<!-- 加载配置文件 -->
	<!-- util:properties方式,类中@Value("#{jdbc[driver]}") -->
	<!-- <util:properties id="jdbc" location="classpath:db.properties"></util:properties> -->
	<!-- PropertyPlaceholderConfigurer方式,这里使用其扩展,以便其在源代码中使用,类中ConfigUtils.getString("db.driver") -->
	<bean class="cn.neu.utils.ConfigUtil">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
		<property name="ignoreResourceNotFound" value="false" />
	</bean>

	<!-- dbcp连接池 -->
	<bean id="ds" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${db.driver}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.user}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds"></property>
		<property name="mapperLocations" value="classpath:cn/neu/dao/*.xml"></property>
	</bean>
	<!--自动扫描 将Mapper接口生成代理注入到Spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.neu.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 事务处理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds"></property>
	</bean>
	<!-- 注解声明事务 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />
	<!-- 配置事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	</tx:advice>

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- redis配置 -->
	<!-- redis连接池的配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redisPoolMaxIdle}" />
		<property name="minIdle" value="${redisPoolMinIdle}" />
		<property name="maxWaitMillis" value="${redisPoolMaxWaitMillis}" />
		<property name="testOnBorrow" value="${redisPoolTestOnBorrow}" />
		<property name="testOnReturn" value="${redisPoolTtestOnReturn}" />
	</bean>

	<!-- redis的连接池pool，不是必选项：timeout/password -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redisHost}" />
		<constructor-arg index="2" value="${redisPort}" type="int" />
		<constructor-arg index="3" value="${redisTimeout}"
			type="int" />
	</bean>
</beans>